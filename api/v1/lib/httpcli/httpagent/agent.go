package httpagent

import (
	"context"
	"fmt"

	"github.com/mesos/mesos-go/api/v1/lib"
	"github.com/mesos/mesos-go/api/v1/lib/agent"
	"github.com/mesos/mesos-go/api/v1/lib/agent/calls"
	"github.com/mesos/mesos-go/api/v1/lib/client"
	"github.com/mesos/mesos-go/api/v1/lib/httpcli"
)

// NewSender generates a sender that uses the Mesos v1 HTTP API for encoding/decoding requests/responses.
// The ResponseClass is inferred from the first object generated by the given Request.
func NewSender(c *httpcli.Client) calls.Sender {
	return calls.SenderFunc(func(ctx context.Context, r calls.Request) (mesos.Response, error) {
		var (
			obj     = r.Call()
			rc, err = responseClass(obj)
		)
		if err != nil {
			return nil, err
		}

		var req client.Request

		switch r.(type) {
		case calls.RequestStreaming:
			first := true
			req = calls.RequestStreamingFunc(func() *agent.Call {
				if first {
					first = false
					return obj
				}
				return r.Call()
			})
		default:
			req = calls.NonStreaming(obj)
		}

		return c.Send(req, rc, httpcli.Context(ctx))
	})
}

func responseClass(c *agent.Call) (rc client.ResponseClass, err error) {
	if c == nil {
		err = httpcli.ProtocolError("nil agent.Call not allowed")
		return
	}

	switch t := c.GetType(); t {
	// singleton
	case agent.Call_GET_HEALTH,
		agent.Call_GET_FLAGS,
		agent.Call_GET_VERSION,
		agent.Call_GET_METRICS,
		agent.Call_GET_LOGGING_LEVEL,
		agent.Call_LIST_FILES,
		agent.Call_READ_FILE,
		agent.Call_GET_STATE,
		agent.Call_GET_CONTAINERS,
		agent.Call_GET_FRAMEWORKS,
		agent.Call_GET_EXECUTORS,
		agent.Call_GET_TASKS,
		agent.Call_WAIT_NESTED_CONTAINER:
		rc = client.ResponseClassSingleton

	// streaming
	case agent.Call_LAUNCH_NESTED_CONTAINER_SESSION,
		agent.Call_ATTACH_CONTAINER_OUTPUT:
		rc = client.ResponseClassStreaming

	// no-data
	case agent.Call_SET_LOGGING_LEVEL,
		agent.Call_LAUNCH_NESTED_CONTAINER,
		agent.Call_KILL_NESTED_CONTAINER,
		agent.Call_ATTACH_CONTAINER_INPUT:
		rc = client.ResponseClassAuto

	default:
		err = httpcli.ProtocolError(fmt.Sprintf("unsupported agent.Call type: %v", t))
	}
	return
}
